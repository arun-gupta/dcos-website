extends ../layouts/base-whitefooter.jade

block head
  title Fast Data | DC/OS
  meta(property='og:locale', content='en_US')
  meta(property='og:type', content='article')
  meta(property='og:title', content='Fast Data | DC/OS')
  meta(property='og:image', content='https://dcos.io/assets/images/social-img.png')
  meta(property='og:description', content='Fast Data on DC/OS')
  meta(property='og:url', content='https://dcos.io/')
  meta(property='og:site_name', content='DC/OS')
  meta(name='twitter:card', content='summary')
  meta(name='twitter:site', content='@dcos')
  meta(name='twitter:title', content='Fast Data | DC/OS')
  meta(name='twitter:card', content='summary_large_image')
  meta(name='twitter:image', content='https://dcos.io/assets/images/social-img.png')
  meta(name='twitter:description', content='Fast Data on DC/OS')

block content

  .container.container--dark-background.pb5.px2.sm-pb0(style="display: block;")
    .mx-auto.max-width-4
      +header(style="padding: 0;")

    .mx-auto.max-width-4
      .container__content.community-hero
        h1 Fast Data on DC/OS
        //- p.hero-subtitle Data comes from many sources, and is proliferating faster than ever before. Ordinary people are now able to track every click on their website and every beat of their heart. All of this data is collected in real time, but up until recently it was processed after it was collected, in order to find out what had happened in the past(...)




  //- DC/OS enables fast data
  .outer-container.bg-white.clearfix.py5.px2
    .row
      .max-width-4.mx-auto
        .lg-col-8.col-12.xs-col-12.px2.mx-auto
          h2.pb4.center DC/OS Enables Fast Data

        .flex.flex-auto.flex-wrap
          .lg-col-4.col-6.xs-col-12.xs-center.px2.pb0
            h4 On-demand provisioning
            p Data services like message queues to track your datastream, processing programs, and databases to store your results all have different requirements. Provisioning them can be a huge challenge. DC/OS abstracts away the details and allows you to provision and run all of these pieces on a common set of resources...
          .lg-col-4.col-6.xs-col-12.xs-center.px2.pb0
            h4 Simplified operations
            p Node failure is an expected challenge if you are running in a datacenter. If you are processing big data when a node fails, it can be manually restarted. But when you depend on fast data, every second counts. DC/OS provides a resilient architecture that automatically reschedules tasks that were running...
          .lg-col-4.col-6.xs-col-12.xs-center.px2.pb0
            h4 Elastic data infrastructure
            p When processing big data, you can gauge, and even control, how much processing power you need at any given time, by running your data through your pipeline in big batches. But fast data is unpredictable, and the amount of processing power you need can vary from moment to moment. DC/OS allows you to scale up, down...




  //- Challenges / Solutions
  .outer-container.bg-gray.clearfix.py5.px2
    .row
      .max-width-4.mx-auto
        .mxn2.flex.flex-auto.flex-wrap.items-center
          .lg-col-6.col-12.xs-col-12.px2
            h2 Challenges / Solutions
            p Data comes from many sources, and is proliferating faster than ever before. Ordinary people are now able to track every click on their website and every beat of their heart. All of this data is collected in real time, but up until recently it was processed after it was collected, in order to find out what had happened in the past, not what is happening right now. The huge amount of data collected from clients, devices, and sensors, and processed after the fact was called “big data”.
            p But, modern apps need to give their users information about what is happening now, not what happened yesterday. Users want to chat with deep-learning powered bots that can triage complex and unexpected issues. They want to know their heart rate in real-time, to optimize their current workout. In order to use big data to deliver real-time insights, you need to process the data as you collect it, and feed it back to the app that will be using that data. When data is processed as it is gathered to provide real time insights, it is called “fast data”.
          .lg-col-6.col-12.xs-col-12.px2
            +image('/assets/images/hero-image.png')





  //- Section 2
  .outer-container.bg-white.clearfix.py5.px2
    .row
      .max-width-4.mx-auto
        .mxn2.flex.flex-auto.flex-wrap
          h2.pb4.center.mx-auto Fast data resources

      .max-width-4.mx-auto.pb3
        .mxn2.flex.flex-auto.flex-wrap
          h4.col-12.mx2 Learn More
          a.card.col-4.left-align.px3.py3(style="display: block")
            h4.my0 Fast Data 101
            //- ul.inherit-ul
            //-   li.text-dark-gray.pb1 Standard deck with no voice over
            //-   li.text-dark-gray Demo possible but not specified

      .max-width-4.mx-auto.pb3
        .mxn2.flex.flex-auto.flex-wrap
          h4.col-12.mx2 Get Started
          a.card.col-4.left-align.px3.py3(style="display: block")
            h4.my0 Fast Data 201
            //- ul.inherit-ul
            //-   li.text-dark-gray.pb1 Youtube video
          a.card.col-4.left-align.px3.py3(style="display: block")
            h4.my0 Developing Elastic Data Pipelines
            //- ul.inherit-ul
            //-   li.text-dark-gray.pb1 Developing Elastic Data Pipelines
            //-   li.text-dark-gray Demo possible but not specified
          a.card.col-4.left-align.px3.py3(style="display: block")
            h4.my0 KairosDB Example
            //- ul.inherit-ul
            //-   li.text-dark-gray.pb1 GitHub repo walk through

      .max-width-4.mx-auto.pb3
        .mxn2.flex.flex-auto.flex-wrap
          h4.col-12.mx2 Deep Dive
          a.card.col-4.left-align.px3.py3(style="display: block")
            h4.my0 Internet of Things Example
            //- ul.inherit-ul
            //-   li.text-dark-gray.pb1 GitHub repo walk through
          a.card.col-4.left-align.px3.py3(style="display: block")
            h4.my0 Time Series Example
            //- ul.inherit-ul
            //-   li.text-dark-gray.pb1 GitHub repo walk through


  //- Footer
  .container
    +footer
